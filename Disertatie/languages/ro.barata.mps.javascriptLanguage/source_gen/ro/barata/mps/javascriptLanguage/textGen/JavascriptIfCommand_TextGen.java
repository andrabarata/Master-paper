package ro.barata.mps.javascriptLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class JavascriptIfCommand_TextGen extends SNodeTextGen {
  public void doGenerateText(SNode node) {
    this.append("if(");
    appendNode(SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0xd3ddb860292b4451L, 0x8638cec4e3c81b18L, 0x2addac2a6ffddd7fL, 0x62619ddfe269093L, "left")));
    this.append(SPropertyOperations.getString_def(node, MetaAdapterFactory.getProperty(0xd3ddb860292b4451L, 0x8638cec4e3c81b18L, 0x2addac2a6ffddd7fL, 0x34756c9d9efb215cL, "condition"), "=="));
    appendNode(SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0xd3ddb860292b4451L, 0x8638cec4e3c81b18L, 0x2addac2a6ffddd7fL, 0x62619ddfe26914cL, "right")));
    this.append("){");
    this.appendNewLine();
    {
      Iterable<SNode> collection = SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xd3ddb860292b4451L, 0x8638cec4e3c81b18L, 0x2addac2a6ffddd7fL, 0x34756c9d9efb21ceL, "ifBodyCommands"));
      for (SNode item : collection) {
        appendNode(item);
      }
    }
    this.appendNewLine();
    this.append("}");
    if (ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xd3ddb860292b4451L, 0x8638cec4e3c81b18L, 0x2addac2a6ffddd7fL, 0x34756c9d9f0d55a7L, "elseBodyCommands"))).isNotEmpty()) {
      this.append(" else {");
      this.appendNewLine();
      {
        Iterable<SNode> collection = SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0xd3ddb860292b4451L, 0x8638cec4e3c81b18L, 0x2addac2a6ffddd7fL, 0x34756c9d9f0d55a7L, "elseBodyCommands"));
        for (SNode item : collection) {
          appendNode(item);
        }
      }
      this.append("}");
    }
    this.appendNewLine();
  }
}
