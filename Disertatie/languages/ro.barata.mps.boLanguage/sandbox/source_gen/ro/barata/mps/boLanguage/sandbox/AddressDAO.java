package ro.barata.mps.boLanguage.sandbox;

/*Generated by MPS */

import java.sql.Connection;
import java.sql.Statement;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;
import java.sql.ResultSet;

public class AddressDAO {
  private Connection connn;
  private Statement stmt;

  public AddressDAO(Connection connection) throws SQLException, ClassNotFoundException {
    connn = connection;
    stmt = connection.createStatement();
  }

  public List<Address> getAllAddresss() throws SQLException {
    List<Address> addresss = new ArrayList<Address>();
    String columns = "";
    columns += "table0." + "id" + " \"parent" + "id" + "\",";
    columns += "table0." + "line1" + " \"parent" + "line1" + "\",";
    columns += "table0." + "line2" + " \"parent" + "line2" + "\",";
    columns += "table0." + "postcode" + " \"parent" + "postcode" + "\",";
    columns += "table0." + "state" + " \"parent" + "state" + "\",";
    columns += "table0." + "country" + " \"parent" + "country" + "\",";
    columns += "table0." + "city" + " \"parent" + "city" + "\",";
    String sql = " from " + "adresses" + " table0";
    String leftJoins = "";
    int i = 1;

    sql = "select " + columns.substring(0, columns.length() - 1) + sql + leftJoins;
    System.out.println(sql);
    ResultSet set = stmt.executeQuery(sql);
    Address foundAddress = null;
    while (set.next()) {
      foundAddress = new Address();
      foundAddress.setId(Integer.valueOf(set.getBigDecimal("parent" + "id").intValue()));
      foundAddress.setLine1(set.getString("parent" + "line1"));
      foundAddress.setLine2(set.getString("parent" + "line2"));
      foundAddress.setPostcode(Integer.valueOf(set.getBigDecimal("parent" + "postcode").intValue()));
      foundAddress.setState(set.getString("parent" + "state"));
      foundAddress.setCountry(set.getString("parent" + "country"));
      foundAddress.setCity(set.getString("parent" + "city"));
      boolean flag = true;
      for (Address entity : addresss) {
        if (entity.getId() == foundAddress.getId()) {
          flag = false;
        }
      }
      if (flag) {
        addresss.add(foundAddress);
      }
    }
    return addresss;
  }

  public List<Address> findAddresss(Address address) throws SQLException {
    List<Address> addresss = new ArrayList<Address>();
    String sql = "select ";
    String columns = "";
    columns += "id";
    columns += ",";
    columns += "line1";
    columns += ",";
    columns += "line2";
    columns += ",";
    columns += "postcode";
    columns += ",";
    columns += "state";
    columns += ",";
    columns += "country";
    columns += ",";
    columns += "city";
    String values = "";
    if (address.getId() != null) {
      values += "id" + "='" + address.getId() + "' and ";
    }
    if (address.getLine1() != null) {
      values += "line1" + "='" + address.getLine1() + "' and ";
    }
    if (address.getLine2() != null) {
      values += "line2" + "='" + address.getLine2() + "' and ";
    }
    if (address.getPostcode() != null) {
      values += "postcode" + "='" + address.getPostcode() + "' and ";
    }
    if (address.getState() != null) {
      values += "state" + "='" + address.getState() + "' and ";
    }
    if (address.getCountry() != null) {
      values += "country" + "='" + address.getCountry() + "' and ";
    }
    if (address.getCity() != null) {
      values += "city" + "='" + address.getCity() + "' and ";
    }
    int i = 1;
    if (values.length() > 6) {
      values = " where " + values.substring(0, values.length() - 5);
    }
    sql += columns + " from " + "adresses" + values;
    System.out.println("Find entities: " + sql);
    ResultSet set = stmt.executeQuery(sql);
    Address foundAddress = new Address();
    while (set.next()) {
      foundAddress = new Address();
      foundAddress.setId(Integer.valueOf(set.getBigDecimal("id").intValue()));
      foundAddress.setLine1(set.getString("line1"));
      foundAddress.setLine2(set.getString("line2"));
      foundAddress.setPostcode(Integer.valueOf(set.getBigDecimal("postcode").intValue()));
      foundAddress.setState(set.getString("state"));
      foundAddress.setCountry(set.getString("country"));
      foundAddress.setCity(set.getString("city"));
      addresss.add(foundAddress);
    }
    return addresss;
  }

  public void addAddress(Address address) throws SQLException, ClassNotFoundException {
    String sql = "insert into " + "adresses" + "(";
    String columns = "";
    String values = "";
    // Loops through the properties and sets column names and column values 
    if (address.getId() != null) {
      columns += "id" + ",";
      values += "'" + address.getId() + "',";
    }
    if (address.getLine1() != null) {
      columns += "line1" + ",";
      values += "'" + address.getLine1() + "',";
    }
    if (address.getLine2() != null) {
      columns += "line2" + ",";
      values += "'" + address.getLine2() + "',";
    }
    if (address.getPostcode() != null) {
      columns += "postcode" + ",";
      values += "'" + address.getPostcode() + "',";
    }
    if (address.getState() != null) {
      columns += "state" + ",";
      values += "'" + address.getState() + "',";
    }
    if (address.getCountry() != null) {
      columns += "country" + ",";
      values += "'" + address.getCountry() + "',";
    }
    if (address.getCity() != null) {
      columns += "city" + ",";
      values += "'" + address.getCity() + "',";
    }
    // Searches for the parent entity, such that it identifies and sets the foreign key columns 
    // Searches for the reference entities, such that it identifies and sets the foreign key columns 
    sql += columns.substring(0, columns.length() - 1) + ") values (" + values.substring(0, values.length() - 1) + ")";
    System.out.println(sql);
    stmt.execute(sql);
    // Loops thhrough the children, and adds them recursively to the database 
  }

  public void updateAddress(Address oldaddress, Address newaddress) throws SQLException, ClassNotFoundException {
    String sql = "update " + "adresses" + " set ";
    String values = "";
    if (newaddress.getId() != null) {
      values += "id" + "='" + newaddress.getId() + "',";
    }
    if (newaddress.getLine1() != null) {
      values += "line1" + "='" + newaddress.getLine1() + "',";
    }
    if (newaddress.getLine2() != null) {
      values += "line2" + "='" + newaddress.getLine2() + "',";
    }
    if (newaddress.getPostcode() != null) {
      values += "postcode" + "='" + newaddress.getPostcode() + "',";
    }
    if (newaddress.getState() != null) {
      values += "state" + "='" + newaddress.getState() + "',";
    }
    if (newaddress.getCountry() != null) {
      values += "country" + "='" + newaddress.getCountry() + "',";
    }
    if (newaddress.getCity() != null) {
      values += "city" + "='" + newaddress.getCity() + "',";
    }
    String condition = " where ";
    if (oldaddress.getId() != null) {
      condition += "id" + "='" + oldaddress.getId() + "' and ";
    }
    if (oldaddress.getLine1() != null) {
      condition += "line1" + "='" + oldaddress.getLine1() + "' and ";
    }
    if (oldaddress.getLine2() != null) {
      condition += "line2" + "='" + oldaddress.getLine2() + "' and ";
    }
    if (oldaddress.getPostcode() != null) {
      condition += "postcode" + "='" + oldaddress.getPostcode() + "' and ";
    }
    if (oldaddress.getState() != null) {
      condition += "state" + "='" + oldaddress.getState() + "' and ";
    }
    if (oldaddress.getCountry() != null) {
      condition += "country" + "='" + oldaddress.getCountry() + "' and ";
    }
    if (oldaddress.getCity() != null) {
      condition += "city" + "='" + oldaddress.getCity() + "' and ";
    }
    sql += values.substring(0, values.length() - 1) + condition.substring(0, condition.length() - 4);
    System.out.println(sql);
    stmt.execute(sql);

  }

  public void deleteAddress(Address address) throws SQLException {
    String sql = "delete from " + "adresses" + " where";
    String condition = " ";
    // Loops through the properties 
    if (address.getId() != null) {
      condition += "id" + "='" + address.getId() + "'";
      condition += " and ";
    }
    if (address.getLine1() != null) {
      condition += "line1" + "='" + address.getLine1() + "'";
      condition += " and ";
    }
    if (address.getLine2() != null) {
      condition += "line2" + "='" + address.getLine2() + "'";
      condition += " and ";
    }
    if (address.getPostcode() != null) {
      condition += "postcode" + "='" + address.getPostcode() + "'";
      condition += " and ";
    }
    if (address.getState() != null) {
      condition += "state" + "='" + address.getState() + "'";
      condition += " and ";
    }
    if (address.getCountry() != null) {
      condition += "country" + "='" + address.getCountry() + "'";
      condition += " and ";
    }
    if (address.getCity() != null) {
      condition += "city" + "='" + address.getCity() + "'";
      condition += " and ";
    }
    sql += condition.substring(0, condition.length() - 5);
    System.out.println(sql);
    stmt.execute(sql);
  }

}
