package ro.barata.mps.boLanguage.sandbox;

/*Generated by MPS */

import java.sql.Connection;
import java.sql.Statement;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;
import java.sql.ResultSet;
import java.util.LinkedList;

public class AttributeCategoryDAO {
  private Connection connn;
  private Statement stmt;

  public AttributeCategoryDAO(Connection connection) throws SQLException, ClassNotFoundException {
    connn = connection;
    stmt = connection.createStatement();
  }

  public List<AttributeCategory> getAllAttributeCategorys() throws SQLException {
    List<AttributeCategory> attributecategorys = new ArrayList<AttributeCategory>();
    String columns = "";
    columns += "table0." + "id" + " \"parent" + "id" + "\",";
    columns += "table0." + "name" + " \"parent" + "name" + "\",";
    String sql = " from " + "attributeCategories" + " table0";
    String leftJoins = "";
    int i = 1;
    columns += "table" + i + "." + "id" + " \"" + "attributes" + "id" + "\",";
    columns += "table" + i + "." + "name" + " \"" + "attributes" + "name" + "\",";
    columns += "table" + i + "." + "value" + " \"" + "attributes" + "value" + "\",";
    leftJoins += " left join " + "attributes" + " table" + i + " on table" + i + "." + "attributeCategoryId" + "=table0." + "id" + " ";
    i++;

    sql = "select " + columns.substring(0, columns.length() - 1) + sql + leftJoins;
    System.out.println(sql);
    ResultSet set = stmt.executeQuery(sql);
    AttributeCategory foundAttributeCategory = null;
    while (set.next()) {
      foundAttributeCategory = new AttributeCategory();
      foundAttributeCategory.setId(Integer.valueOf(set.getBigDecimal("parent" + "id").intValue()));
      foundAttributeCategory.setName(set.getString("parent" + "name"));
      {
        Attribute child = new Attribute();
        if (set.getBigDecimal("attributes" + "id") != null) {
          child.setId(Integer.valueOf(set.getBigDecimal("attributes" + "id").intValue()));
        }
        if (set.getString("attributes" + "name") != null) {
          child.setAttributeName(set.getString("attributes" + "name"));
        }
        if (set.getString("attributes" + "value") != null) {
          child.setAttributeValue(set.getString("attributes" + "value"));
        }
        if (child.getId() != null) {
          foundAttributeCategory.addAttribute(child);
        }
      }
      boolean flag = true;
      for (AttributeCategory entity : attributecategorys) {
        if (entity.getId() == foundAttributeCategory.getId()) {
          flag = false;
        }
      }
      if (flag) {
        attributecategorys.add(foundAttributeCategory);
      }
    }
    return attributecategorys;
  }

  public List<AttributeCategory> findAttributeCategorys(AttributeCategory attributecategory) throws SQLException {
    List<AttributeCategory> attributecategorys = new ArrayList<AttributeCategory>();
    String sql = "select ";
    String columns = "";
    columns += "id";
    columns += ",";
    columns += "name";
    String values = "";
    if (attributecategory.getId() != null) {
      values += "id" + "='" + attributecategory.getId() + "' and ";
    }
    if (attributecategory.getName() != null) {
      values += "name" + "='" + attributecategory.getName() + "' and ";
    }
    int i = 1;
    if (values.length() > 6) {
      values = " where " + values.substring(0, values.length() - 5);
    }
    sql += columns + " from " + "attributeCategories" + values;
    System.out.println("Find entities: " + sql);
    ResultSet set = stmt.executeQuery(sql);
    AttributeCategory foundAttributeCategory = new AttributeCategory();
    while (set.next()) {
      foundAttributeCategory = new AttributeCategory();
      foundAttributeCategory.setId(Integer.valueOf(set.getBigDecimal("id").intValue()));
      foundAttributeCategory.setName(set.getString("name"));
      attributecategorys.add(foundAttributeCategory);
    }
    return attributecategorys;
  }
  public List<Attribute> findChildAttributes(AttributeCategory parent) throws SQLException {
    List<Attribute> attributes = new ArrayList<Attribute>();
    String sql = "select ";
    String columns = "";
    columns += "id";
    columns += ",";
    columns += "name";
    columns += ",";
    columns += "value";
    sql += columns;
    sql += " from " + "attributes" + " where " + "attributeCategoryId" + " in (select " + "id" + " from " + "attributeCategories";
    if (parent != null) {
      sql += " where ";
      String values = "";
      if (parent.getId() != null) {
        values += "id" + "='" + parent.getId() + "'and ";
      }
      if (parent.getName() != null) {
        values += "name" + "='" + parent.getName() + "'and ";
      }
      sql += values.substring(0, values.length() - 4);
    }
    sql += ")";
    System.out.println(sql);
    ResultSet set = stmt.executeQuery(sql);
    Attribute foundAttribute = new Attribute();
    while (set.next()) {
      foundAttribute = new Attribute();
      foundAttribute.setId(Integer.valueOf(set.getBigDecimal("id").intValue()));
      foundAttribute.setAttributeName(set.getString("name"));
      foundAttribute.setAttributeValue(set.getString("value"));
      attributes.add(foundAttribute);
    }
    return attributes;
  }


  public void addAttributeCategory(AttributeCategory attributecategory) throws SQLException, ClassNotFoundException, CloneNotSupportedException {
    String sql = "insert into " + "attributeCategories" + "(";
    String columns = "";
    String values = "";
    // Loops through the properties and sets column names and column values 
    if (attributecategory.getId() != null) {
      columns += "id" + ",";
      values += "'" + attributecategory.getId() + "',";
    }
    if (attributecategory.getName() != null) {
      columns += "name" + ",";
      values += "'" + attributecategory.getName() + "',";
    }
    // Searches for the parent entity, such that it identifies and sets the foreign key columns 
    {
      Product parentProduct = attributecategory.getParentProduct();
      if (parentProduct != null) {
        columns += "productId" + ",";
        values += "'" + parentProduct.getId().toString() + "',";
      }
    }
    // Searches for the reference entities, such that it identifies and sets the foreign key columns 
    sql += columns.substring(0, columns.length() - 1) + ") values (" + values.substring(0, values.length() - 1) + ")";
    System.out.println(sql);
    stmt.execute(sql);
    // Loops thhrough the children, and adds them recursively to the database 
    if (attributecategory.getAttributes() != null) {
      AttributeDAO childAttributeDAO = new AttributeDAO(connn);
      for (Attribute childAttribute : attributecategory.getAttributes()) {
        List<Attribute> children = childAttributeDAO.findAttributes(childAttribute);
        if (children.size() == 0) {
          childAttributeDAO.addAttribute(childAttribute);
        } else {
          for (Attribute child : children) {
            Attribute copy = (Attribute) child.clone();
            child.setParentAttributeCategory(attributecategory);
            childAttributeDAO.updateAttribute(copy, child);

          }
        }
      }
    }
  }

  public void updateAttributeCategory(AttributeCategory oldattributecategory, AttributeCategory newattributecategory) throws SQLException, ClassNotFoundException, CloneNotSupportedException {
    String sql = "update " + "attributeCategories" + " set ";
    String values = "";
    if (newattributecategory.getId() != null) {
      values += "id" + "='" + newattributecategory.getId() + "',";
    }
    if (newattributecategory.getName() != null) {
      values += "name" + "='" + newattributecategory.getName() + "',";
    }
    {
      List<String> columnsList = new LinkedList<String>();
      List<String> valuesList = new LinkedList<String>();
      {
        Product parentProduct = newattributecategory.getParentProduct();
        if (parentProduct != null) {
          columnsList.add("productId");
          valuesList.add(parentProduct.getId().toString());
        }
      }
      for (int i = 0; i < columnsList.size(); i++) {
        values += columnsList.get(i) + "='" + valuesList.get(i) + "',";
      }
    }
    String condition = " where ";
    if (oldattributecategory.getId() != null) {
      condition += "id" + "='" + oldattributecategory.getId() + "' and ";
    }
    if (oldattributecategory.getName() != null) {
      condition += "name" + "='" + oldattributecategory.getName() + "' and ";
    }
    sql += values.substring(0, values.length() - 1) + condition.substring(0, condition.length() - 4);
    System.out.println(sql);
    stmt.execute(sql);
    if (newattributecategory.getAttributes() != null) {
      AttributeDAO childAttributeDAO = new AttributeDAO(connn);
      for (Attribute childAttribute : newattributecategory.getAttributes()) {
        List<Attribute> children = childAttributeDAO.findAttributes(childAttribute);
        if (children.size() == 0) {
          childAttributeDAO.addAttribute(childAttribute);
        } else {
          for (Attribute child : children) {
            Attribute copy = (Attribute) child.clone();
            child.setParentAttributeCategory(newattributecategory);
            childAttributeDAO.updateAttribute(copy, child);

          }
        }
      }
    }

  }

  public void deleteAttributeCategory(AttributeCategory attributecategory) throws SQLException {
    String sql = "delete from " + "attributeCategories" + " where";
    String condition = " ";
    // Loops through the properties 
    if (attributecategory.getId() != null) {
      condition += "id" + "='" + attributecategory.getId() + "'";
      condition += " and ";
    }
    if (attributecategory.getName() != null) {
      condition += "name" + "='" + attributecategory.getName() + "'";
      condition += " and ";
    }
    sql += condition.substring(0, condition.length() - 5);
    System.out.println(sql);
    stmt.execute(sql);
  }

}
