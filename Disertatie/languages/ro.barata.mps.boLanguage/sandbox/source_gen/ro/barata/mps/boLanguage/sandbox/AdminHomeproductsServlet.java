package ro.barata.mps.boLanguage.sandbox;

/*Generated by MPS */

import javax.servlet.http.HttpServlet;
import java.sql.Connection;
import java.sql.SQLException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.ServletException;
import java.io.IOException;

public class AdminHomeproductsServlet extends HttpServlet {
  private Connection connection;
  public AdminHomeproductsServlet() throws SQLException, ClassNotFoundException, CloneNotSupportedException {
    if (connection == null) {
      connection = DatabaseConnection.getConnection();
    }
  }
  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    response.setContentType("text/html");
    response.setStatus(HttpServletResponse.SC_OK);
    try {
      response.getWriter().println("<!DOCTYPE html>");
      System.out.println("GET!");
      handleRequest(request, response);

    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }
  protected void doPost(HttpServletRequest request, HttpServletResponse response) {
    try {
      handleRequest(request, response);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  private void handleRequest(HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, ClassNotFoundException, CloneNotSupportedException {
    String action = request.getParameter("actionName");
    String requestParameterValue = "";
    if (action != null && !(action.equals(""))) {
      if (action.equals("dbdeleteProduct")) {
        dbdeleteProduct(request, response, requestParameterValue);
      }

    } else {
      response.getWriter().println(AdminHomeproductsGenerator.getContent(request.getSession(), requestParameterValue));
    }
  }
  private void dbdeleteProduct(HttpServletRequest request, HttpServletResponse response, String requestParameterValue) throws SQLException, ClassNotFoundException, IOException, CloneNotSupportedException {
    String value;
    String splitter;
    ProductDAO productDAO = new ProductDAO(connection);
    Product product = new Product();
    product = new Product();
    // Sets the given property with values fetched either from the input model,  
    // or from the HTTP data recevied from the client (browser) 
    value = request.getParameter("id");
    if (value != null && !(value.equals(""))) {
      product.setId(Integer.parseInt(value));

    }
    productDAO.deleteProduct(product);

    response.getWriter().println(AdminHomeproductsGenerator.getContent(request.getSession(), requestParameterValue));

  }

}
