package ro.barata.mps.boLanguage.sandbox;

/*Generated by MPS */

import javax.servlet.http.HttpServlet;
import java.sql.Connection;
import java.sql.SQLException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.ServletException;
import java.io.IOException;
import java.util.List;
import javax.servlet.http.HttpSession;
import flexjson.JSONSerializer;

public class LoginServlet extends HttpServlet {
  private Connection connection;
  public LoginServlet() throws SQLException, ClassNotFoundException, CloneNotSupportedException {
    if (connection == null) {
      connection = DatabaseConnection.getConnection();
    }
  }
  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    response.setContentType("text/html");
    response.setStatus(HttpServletResponse.SC_OK);
    try {
      response.getWriter().println("<!DOCTYPE html>");
      System.out.println("GET!");
      handleRequest(request, response);

    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }
  protected void doPost(HttpServletRequest request, HttpServletResponse response) {
    try {
      handleRequest(request, response);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  private void handleRequest(HttpServletRequest request, HttpServletResponse response) throws IOException, SQLException, ClassNotFoundException, CloneNotSupportedException {
    String action = request.getParameter("actionName");
    String requestParameterValue = "";
    if (action != null && !(action.equals(""))) {
      if (action.equals("jsonUser")) {
        jsonUser(request, response);
      }

    } else {
      response.getWriter().println(LoginGenerator.getContent(request.getSession(), requestParameterValue));
    }
  }
  private void jsonUser(HttpServletRequest request, HttpServletResponse response) throws ClassNotFoundException, SQLException, IOException, CloneNotSupportedException {
    User searchUser = new User();
    // Initializes a new entity instance with values received from the client (browser) 
    if (request.getParameter("userId") != null && !(request.getParameter("userId").equals(""))) {
      String value = request.getParameter("userId");
      searchUser.setUserId(Integer.parseInt(value));
    }
    if (request.getParameter("userName") != null && !(request.getParameter("userName").equals(""))) {
      String value = request.getParameter("userName");
      searchUser.setUserName(value);
    }
    if (request.getParameter("password") != null && !(request.getParameter("password").equals(""))) {
      String value = request.getParameter("password");
      searchUser.setPassword(value);
    }
    if (request.getParameter("priviledge") != null && !(request.getParameter("priviledge").equals(""))) {
      String value = request.getParameter("priviledge");
      searchUser.setPriviledge(value);
    }
    UserDAO userDAO = new UserDAO(connection);
    // Returns the entity that matched the pattern from the DB 
    List<User> userList = userDAO.getQueryUsers(searchUser);
    User user = ((userList.size() > 0) ? userList.get(0) : new User());
    {
      HttpSession session = request.getSession();
      session.setAttribute("user", user);
    }
    // Serializes the entity in JSON format, and sends it back to the client 
    JSONSerializer serializer = new JSONSerializer();
    String json = serializer.serialize(user);
    response.getWriter().println(json);
  }

}
