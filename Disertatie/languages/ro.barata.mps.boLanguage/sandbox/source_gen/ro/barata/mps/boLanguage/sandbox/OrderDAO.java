package ro.barata.mps.boLanguage.sandbox;

/*Generated by MPS */

import java.sql.Connection;
import java.sql.Statement;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;
import java.sql.ResultSet;

public class OrderDAO {
  private Connection connn;
  private Statement stmt;

  public OrderDAO(Connection connection) throws SQLException, ClassNotFoundException {
    connn = connection;
    stmt = connection.createStatement();
  }

  public List<Order> getAllOrders() throws SQLException {
    List<Order> orders = new ArrayList<Order>();
    String columns = "";
    columns += "table0." + "id" + " \"parent" + "id" + "\",";
    columns += "table0." + "dateCreated" + " \"parent" + "dateCreated" + "\",";
    columns += "table0." + "status" + " \"parent" + "status" + "\",";
    String sql = " from " + "orders" + " table0";
    String leftJoins = "";
    int i = 1;
    columns += "table" + i + "." + "id" + " \"" + "orderItems" + "id" + "\",";
    leftJoins += " left join " + "orderItems" + " table" + i + " on table" + i + "." + "orderId" + "=table0." + "id" + " ";
    i++;

    sql = "select " + columns.substring(0, columns.length() - 1) + sql + leftJoins;
    System.out.println(sql);
    ResultSet set = stmt.executeQuery(sql);
    Order foundOrder = null;
    while (set.next()) {
      foundOrder = new Order();
      foundOrder.setId(Integer.valueOf(set.getBigDecimal("parent" + "id").intValue()));
      foundOrder.setDateCreated(Integer.valueOf(set.getBigDecimal("parent" + "dateCreated").intValue()));
      foundOrder.setStatus(set.getString("parent" + "status"));
      {
        OrderItem child = new OrderItem();
        if (set.getBigDecimal("orderItems" + "id") != null) {
          child.setId(Integer.valueOf(set.getBigDecimal("orderItems" + "id").intValue()));
        }
        if (child.getId() != null) {
          foundOrder.addOrderItem(child);
        }
      }
      boolean flag = true;
      for (Order entity : orders) {
        if (entity.getId() == foundOrder.getId()) {
          flag = false;
        }
      }
      if (flag) {
        orders.add(foundOrder);
      }
    }
    return orders;
  }

  public List<Order> findOrders(Order order) throws SQLException {
    List<Order> orders = new ArrayList<Order>();
    String sql = "select ";
    String columns = "";
    columns += "id";
    columns += ",";
    columns += "dateCreated";
    columns += ",";
    columns += "status";
    String values = "";
    if (order.getId() != null) {
      values += "id" + "='" + order.getId() + "' and ";
    }
    if (order.getDateCreated() != null) {
      values += "dateCreated" + "='" + order.getDateCreated() + "' and ";
    }
    if (order.getStatus() != null) {
      values += "status" + "='" + order.getStatus() + "' and ";
    }
    int i = 1;
    if (values.length() > 6) {
      values = " where " + values.substring(0, values.length() - 5);
    }
    sql += columns + " from " + "orders" + values;
    System.out.println("Find entities: " + sql);
    ResultSet set = stmt.executeQuery(sql);
    Order foundOrder = new Order();
    while (set.next()) {
      foundOrder = new Order();
      foundOrder.setId(Integer.valueOf(set.getBigDecimal("id").intValue()));
      foundOrder.setDateCreated(Integer.valueOf(set.getBigDecimal("dateCreated").intValue()));
      foundOrder.setStatus(set.getString("status"));
      orders.add(foundOrder);
    }
    return orders;
  }
  public List<OrderItem> findChildOrderItems(Order parent) throws SQLException {
    List<OrderItem> orderitems = new ArrayList<OrderItem>();
    String sql = "select ";
    String columns = "";
    columns += "id";
    sql += columns;
    sql += " from " + "orderItems" + " where " + "orderId" + " in (select " + "id" + " from " + "orders";
    if (parent != null) {
      sql += " where ";
      String values = "";
      if (parent.getId() != null) {
        values += "id" + "='" + parent.getId() + "'and ";
      }
      if (parent.getDateCreated() != null) {
        values += "dateCreated" + "='" + parent.getDateCreated() + "'and ";
      }
      if (parent.getStatus() != null) {
        values += "status" + "='" + parent.getStatus() + "'and ";
      }
      sql += values.substring(0, values.length() - 4);
    }
    sql += ")";
    System.out.println(sql);
    ResultSet set = stmt.executeQuery(sql);
    OrderItem foundOrderItem = new OrderItem();
    while (set.next()) {
      foundOrderItem = new OrderItem();
      foundOrderItem.setId(Integer.valueOf(set.getBigDecimal("id").intValue()));
      orderitems.add(foundOrderItem);
    }
    return orderitems;
  }

  public void addOrder(Order order) throws SQLException, ClassNotFoundException {
    String sql = "insert into " + "orders" + "(";
    String columns = "";
    String values = "";
    // Loops through the properties and sets column names and column values 
    if (order.getId() != null) {
      columns += "id" + ",";
      values += "'" + order.getId() + "',";
    }
    if (order.getDateCreated() != null) {
      columns += "dateCreated" + ",";
      values += "'" + order.getDateCreated() + "',";
    }
    if (order.getStatus() != null) {
      columns += "status" + ",";
      values += "'" + order.getStatus() + "',";
    }
    // Searches for the parent entity, such that it identifies and sets the foreign key columns 
    // Searches for the reference entities, such that it identifies and sets the foreign key columns 
    sql += columns.substring(0, columns.length() - 1) + ") values (" + values.substring(0, values.length() - 1) + ")";
    System.out.println(sql);
    stmt.execute(sql);
    // Loops thhrough the children, and adds them recursively to the database 
    if (order.getOrderItems() != null) {
      OrderItemDAO childOrderItemDAO = new OrderItemDAO(connn);
      for (OrderItem childOrderItem : order.getOrderItems()) {
        childOrderItemDAO.addOrderItem(childOrderItem);
      }
    }
  }

  public void updateOrder(Order oldorder, Order neworder) throws SQLException, ClassNotFoundException {
    String sql = "update " + "orders" + " set ";
    String values = "";
    if (neworder.getId() != null) {
      values += "id" + "='" + neworder.getId() + "',";
    }
    if (neworder.getDateCreated() != null) {
      values += "dateCreated" + "='" + neworder.getDateCreated() + "',";
    }
    if (neworder.getStatus() != null) {
      values += "status" + "='" + neworder.getStatus() + "',";
    }
    String condition = " where ";
    if (oldorder.getId() != null) {
      condition += "id" + "='" + oldorder.getId() + "' and ";
    }
    if (oldorder.getDateCreated() != null) {
      condition += "dateCreated" + "='" + oldorder.getDateCreated() + "' and ";
    }
    if (oldorder.getStatus() != null) {
      condition += "status" + "='" + oldorder.getStatus() + "' and ";
    }
    sql += values.substring(0, values.length() - 1) + condition.substring(0, condition.length() - 4);
    System.out.println(sql);
    stmt.execute(sql);
    if (neworder.getOrderItems() != null) {
      OrderItemDAO childOrderItemDAO = new OrderItemDAO(connn);
      for (OrderItem childOrderItem : neworder.getOrderItems()) {
        childOrderItemDAO.addOrderItem(childOrderItem);
      }
    }

  }

  public void deleteOrder(Order order) throws SQLException {
    String sql = "delete from " + "orders" + " where";
    String condition = " ";
    // Loops through the properties 
    if (order.getId() != null) {
      condition += "id" + "='" + order.getId() + "'";
      condition += " and ";
    }
    if (order.getDateCreated() != null) {
      condition += "dateCreated" + "='" + order.getDateCreated() + "'";
      condition += " and ";
    }
    if (order.getStatus() != null) {
      condition += "status" + "='" + order.getStatus() + "'";
      condition += " and ";
    }
    sql += condition.substring(0, condition.length() - 5);
    System.out.println(sql);
    stmt.execute(sql);
  }

}
