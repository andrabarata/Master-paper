package ro.barata.mps.boLanguage.sandbox;

/*Generated by MPS */

import java.sql.Statement;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;
import java.sql.ResultSet;

public class TestDAO {
  private Statement stmt;

  public TestDAO() throws SQLException, ClassNotFoundException {
    stmt = DatabaseConnector.getConnection().createStatement();
  }

  public List<Test> getAllTests() throws SQLException {
    List<Test> tests = new ArrayList<Test>();
    String sql = "select * from " + "testa";
    ResultSet set = stmt.executeQuery(sql);
    Test foundTest = new Test();
    while (set.next()) {
      foundTest = new Test();
      foundTest.setTest1(Integer.valueOf(set.getBigDecimal("test1").intValue()));
      foundTest.setTest2(set.getString("test2"));
      tests.add(foundTest);
    }
    return tests;
  }

  public Test findById(String[] keys, String[] keyValues) throws SQLException {
    String sql = "select ";
    String columns = "";
    columns += "idA";
    columns += ",";
    columns += "fhruf";
    columns = ((columns.length() > 0) ? "(" + columns + ")" : columns);
    String values = "";
    for (int i = 0; i < keys.length; i++) {
      values += keys[i] + "=" + keyValues[i] + (((i < keys.length - 1) ? "," : ""));
    }
    if (values.length() > 0) {
      values = " where " + values;
    }
    sql += columns + "from" + "testa" + values;
    ResultSet set = stmt.executeQuery(sql);
    List<Object> result = new ArrayList<Object>();
    int i = 0;
    while (set.next()) {
      result.add(set.getObject(i + 1));
      i++;
    }
    Test test = new Test();
    i = 0;
    test.setTest1((Integer) result.get(i));
    i++;
    test.setTest2((String) result.get(i));
    i++;
    return test;
  }


  public void addTest(Test test) throws SQLException {
    String sql = "insert into " + "testa" + "(";
    String columns = "";
    String values = "";
    if (test.getTest1() != null) {
      columns += "idA" + ",";
      values += "'" + test.getTest1() + "',";
    }
    if (test.getTest2() != null) {
      columns += "fhruf" + ",";
      values += "'" + test.getTest2() + "',";
    }
    sql += columns.substring(0, columns.length() - 1) + ") values (" + values.substring(0, values.length() - 1) + ")";
    System.out.println(sql);
    stmt.execute(sql);
  }

  public void updateTest(Test oldtest, Test newtest) throws SQLException {
    String sql = "update " + "testa" + " set ";
    String values = "";
    if (newtest.getTest1() != null) {
      values += "idA" + "='" + newtest.getTest1() + "',";
    }
    if (newtest.getTest2() != null) {
      values += "fhruf" + "='" + newtest.getTest2() + "',";
    }

    String condition = " where ";
    if (oldtest.getTest1() != null) {
      condition += "idA" + "='" + oldtest.getTest1() + "' and ";
    }
    if (oldtest.getTest2() != null) {
      condition += "fhruf" + "='" + oldtest.getTest2() + "' and ";
    }
    sql += values.substring(0, values.length() - 1) + condition.substring(0, condition.length() - 4);
    System.out.println(sql);
    stmt.execute(sql);

  }

  public void deleteTest(Test test) throws SQLException {
    String sql = "delete from " + "testa" + " where";
    String condition = " ";
    if (test.getTest1() != null) {
      condition += "idA" + "='" + test.getTest1() + "'";
      condition += " and ";
    }
    if (test.getTest2() != null) {
      condition += "fhruf" + "='" + test.getTest2() + "'";
      condition += " and ";
    }
    sql += condition.substring(0, condition.length() - 5);
    System.out.println(sql);
    stmt.execute(sql);

  }

}
