package ro.barata.mps.boLanguage.sandbox;

/*Generated by MPS */

import java.sql.Connection;
import java.sql.Statement;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;
import java.sql.ResultSet;
import java.util.LinkedList;

public class CategoryDAO {
  private Connection connn;
  private Statement stmt;

  public CategoryDAO(Connection connection) throws SQLException, ClassNotFoundException {
    connn = connection;
    stmt = connection.createStatement();
  }

  public List<Category> getAllCategorys() throws SQLException {
    List<Category> categorys = new ArrayList<Category>();
    String columns = "";
    columns += "table0." + "id" + " \"parent" + "id" + "\",";
    columns += "table0." + "name" + " \"parent" + "name" + "\",";
    String sql = " from " + "categories" + " table0";
    String leftJoins = "";
    int i = 1;
    columns += "table" + i + "." + "id" + " \"" + "products" + "id" + "\",";
    columns += "table" + i + "." + "name" + " \"" + "products" + "name" + "\",";
    columns += "table" + i + "." + "description" + " \"" + "products" + "description" + "\",";
    columns += "table" + i + "." + "units" + " \"" + "products" + "units" + "\",";
    columns += "table" + i + "." + "price" + " \"" + "products" + "price" + "\",";
    leftJoins += " left join " + "products" + " table" + i + " on table" + i + "." + "categoryId" + "=table0." + "id" + " ";
    i++;
    columns += "table" + i + "." + "id" + " \"" + "discounts" + "id" + "\",";
    columns += "table" + i + "." + "subject" + " \"" + "discounts" + "subject" + "\",";
    columns += "table" + i + "." + "description" + " \"" + "discounts" + "description" + "\",";
    columns += "table" + i + "." + "price" + " \"" + "discounts" + "price" + "\",";
    leftJoins += " left join " + "discounts" + " table" + i + " on table" + i + "." + "categoryId" + "=table0." + "id" + " ";
    i++;
    columns += "table" + i + "." + "id" + " \"" + "categories" + "id" + "\",";
    columns += "table" + i + "." + "name" + " \"" + "categories" + "name" + "\",";
    leftJoins += " left join " + "categories" + " table" + i + " on table" + i + "." + "categoryId" + "=table0." + "id" + " ";
    i++;
    columns += "table" + i + "." + "id" + " \"" + "categories" + "id" + "\",";
    columns += "table" + i + "." + "name" + " \"" + "categories" + "name" + "\",";
    leftJoins += " left join " + "categories" + " table" + i + " on table" + i + "." + "parentId" + "=table0." + "id" + " ";
    i++;

    sql = "select " + columns.substring(0, columns.length() - 1) + sql + leftJoins;
    System.out.println(sql);
    ResultSet set = stmt.executeQuery(sql);
    Category foundCategory = null;
    while (set.next()) {
      foundCategory = new Category();
      foundCategory.setId(Integer.valueOf(set.getBigDecimal("parent" + "id").intValue()));
      foundCategory.setName(set.getString("parent" + "name"));
      {
        Product child = new Product();
        if (set.getBigDecimal("products" + "id") != null) {
          child.setId(Integer.valueOf(set.getBigDecimal("products" + "id").intValue()));
        }
        if (set.getString("products" + "name") != null) {
          child.setProductName(set.getString("products" + "name"));
        }
        if (set.getString("products" + "description") != null) {
          child.setDescription(set.getString("products" + "description"));
        }
        if (set.getBigDecimal("products" + "units") != null) {
          child.setUnits(Integer.valueOf(set.getBigDecimal("products" + "units").intValue()));
        }
        if (set.getBigDecimal("products" + "price") != null) {
          child.setPrice(Integer.valueOf(set.getBigDecimal("products" + "price").intValue()));
        }
        if (child.getId() != null) {
          foundCategory.addProduct(child);
        }
      }
      {
        Discount child = new Discount();
        if (set.getBigDecimal("discounts" + "id") != null) {
          child.setId(Integer.valueOf(set.getBigDecimal("discounts" + "id").intValue()));
        }
        if (set.getString("discounts" + "subject") != null) {
          child.setSubject(set.getString("discounts" + "subject"));
        }
        if (set.getString("discounts" + "description") != null) {
          child.setDescription(set.getString("discounts" + "description"));
        }
        if (set.getBigDecimal("discounts" + "price") != null) {
          child.setPrice(Integer.valueOf(set.getBigDecimal("discounts" + "price").intValue()));
        }
        if (child.getId() != null) {
          foundCategory.addDiscount(child);
        }
      }
      {
        Category child = new Category();
        if (set.getBigDecimal("categories" + "id") != null) {
          child.setId(Integer.valueOf(set.getBigDecimal("categories" + "id").intValue()));
        }
        if (set.getString("categories" + "name") != null) {
          child.setName(set.getString("categories" + "name"));
        }
        if (child.getId() != null) {
          foundCategory.addCategory(child);
        }
      }
      {
        Category reference = new Category();
        if (set.getBigDecimal("categories" + "id") != null) {
          reference.setId(Integer.valueOf(set.getBigDecimal("categories" + "id").intValue()));
        }
        if (set.getString("categories" + "name") != null) {
          reference.setName(set.getString("categories" + "name"));
        }

        if (reference.getId() != null) {
          foundCategory.setCategory(reference);
        }
      }
      boolean flag = true;
      for (Category entity : categorys) {
        if (entity.getId() == foundCategory.getId()) {
          flag = false;
        }
      }
      if (flag) {
        categorys.add(foundCategory);
      }
    }
    return categorys;
  }
  public List<Category> getQueryCategorys(Category category) throws SQLException {
    List<Category> categorys = new ArrayList<Category>();
    String columns = "";
    columns += "table0." + "id" + " \"parent" + "id" + "\",";
    columns += "table0." + "name" + " \"parent" + "name" + "\",";
    String sql = " from " + "categories" + " table0";
    String leftJoins = "";
    int i = 1;
    columns += "table" + i + "." + "id" + " \"" + "products" + "id" + "\",";
    columns += "table" + i + "." + "name" + " \"" + "products" + "name" + "\",";
    columns += "table" + i + "." + "description" + " \"" + "products" + "description" + "\",";
    columns += "table" + i + "." + "units" + " \"" + "products" + "units" + "\",";
    columns += "table" + i + "." + "price" + " \"" + "products" + "price" + "\",";
    leftJoins += " left join " + "products" + " table" + i + " on table" + i + "." + "categoryId" + "=table0." + "id" + " ";
    i++;
    columns += "table" + i + "." + "id" + " \"" + "discounts" + "id" + "\",";
    columns += "table" + i + "." + "subject" + " \"" + "discounts" + "subject" + "\",";
    columns += "table" + i + "." + "description" + " \"" + "discounts" + "description" + "\",";
    columns += "table" + i + "." + "price" + " \"" + "discounts" + "price" + "\",";
    leftJoins += " left join " + "discounts" + " table" + i + " on table" + i + "." + "categoryId" + "=table0." + "id" + " ";
    i++;
    columns += "table" + i + "." + "id" + " \"" + "categories" + "id" + "\",";
    columns += "table" + i + "." + "name" + " \"" + "categories" + "name" + "\",";
    leftJoins += " left join " + "categories" + " table" + i + " on table" + i + "." + "categoryId" + "=table0." + "id" + " ";
    i++;
    columns += "table" + i + "." + "id" + " \"" + "categories" + "id" + "\",";
    columns += "table" + i + "." + "name" + " \"" + "categories" + "name" + "\",";
    leftJoins += " left join " + "categories" + " table" + i + " on table" + i + "." + "id" + "=table0." + "parentId" + " ";
    i++;
    String values = "";
    if (category.getId() != null) {
      values += "id" + "='" + category.getId() + "' and ";
    }
    if (category.getName() != null) {
      values += "name" + "='" + category.getName() + "' and ";
    }
    if (values.length() > 6) {
      values = " where " + values.substring(0, values.length() - 5);
    }

    sql = "select " + columns.substring(0, columns.length() - 1) + sql + leftJoins + values;
    System.out.println(sql);
    ResultSet set = stmt.executeQuery(sql);
    Category foundCategory = null;
    while (set.next()) {
      foundCategory = new Category();
      foundCategory.setId(Integer.valueOf(set.getBigDecimal("parent" + "id").intValue()));
      foundCategory.setName(set.getString("parent" + "name"));
      {
        Product child = new Product();
        if (set.getBigDecimal("products" + "id") != null) {
          child.setId(Integer.valueOf(set.getBigDecimal("products" + "id").intValue()));
        }
        if (set.getString("products" + "name") != null) {
          child.setProductName(set.getString("products" + "name"));
        }
        if (set.getString("products" + "description") != null) {
          child.setDescription(set.getString("products" + "description"));
        }
        if (set.getBigDecimal("products" + "units") != null) {
          child.setUnits(Integer.valueOf(set.getBigDecimal("products" + "units").intValue()));
        }
        if (set.getBigDecimal("products" + "price") != null) {
          child.setPrice(Integer.valueOf(set.getBigDecimal("products" + "price").intValue()));
        }
        if (child.getId() != null) {
          foundCategory.addProduct(child);
        }
      }
      {
        Discount child = new Discount();
        if (set.getBigDecimal("discounts" + "id") != null) {
          child.setId(Integer.valueOf(set.getBigDecimal("discounts" + "id").intValue()));
        }
        if (set.getString("discounts" + "subject") != null) {
          child.setSubject(set.getString("discounts" + "subject"));
        }
        if (set.getString("discounts" + "description") != null) {
          child.setDescription(set.getString("discounts" + "description"));
        }
        if (set.getBigDecimal("discounts" + "price") != null) {
          child.setPrice(Integer.valueOf(set.getBigDecimal("discounts" + "price").intValue()));
        }
        if (child.getId() != null) {
          foundCategory.addDiscount(child);
        }
      }
      {
        Category child = new Category();
        if (set.getBigDecimal("categories" + "id") != null) {
          child.setId(Integer.valueOf(set.getBigDecimal("categories" + "id").intValue()));
        }
        if (set.getString("categories" + "name") != null) {
          child.setName(set.getString("categories" + "name"));
        }
        if (child.getId() != null) {
          foundCategory.addCategory(child);
        }
      }
      {
        Category reference = new Category();
        if (set.getBigDecimal("categories" + "id") != null) {
          reference.setId(Integer.valueOf(set.getBigDecimal("categories" + "id").intValue()));
        }
        if (set.getString("categories" + "name") != null) {
          reference.setName(set.getString("categories" + "name"));
        }

        if (reference.getId() != null) {
          foundCategory.setCategory(reference);
        }
      }
      boolean flag = true;
      for (Category entity : categorys) {
        if (entity.getId() == foundCategory.getId()) {
          flag = false;
        }
      }
      if (flag) {
        categorys.add(foundCategory);
      }
    }
    return categorys;
  }

  public List<Category> findCategorys(Category category) throws SQLException {
    List<Category> categorys = new ArrayList<Category>();
    String sql = "select ";
    String columns = "";
    columns += "id";
    columns += ",";
    columns += "name";
    String values = "";
    if (category.getId() != null) {
      values += "id" + "='" + category.getId() + "' and ";
    }
    if (category.getName() != null) {
      values += "name" + "='" + category.getName() + "' and ";
    }
    if (values.length() > 6) {
      values = " where " + values.substring(0, values.length() - 5);
    }
    sql += columns + " from " + "categories" + values;
    System.out.println("Find entities: " + sql);
    ResultSet set = stmt.executeQuery(sql);
    Category foundCategory = new Category();
    while (set.next()) {
      foundCategory = new Category();
      foundCategory.setId(Integer.valueOf(set.getBigDecimal("id").intValue()));
      foundCategory.setName(set.getString("name"));
      categorys.add(foundCategory);
    }
    return categorys;
  }
  public List<Product> findChildProducts(Category parent) throws SQLException {
    List<Product> products = new ArrayList<Product>();
    String sql = "select ";
    String columns = "";
    columns += "id";
    columns += ",";
    columns += "name";
    columns += ",";
    columns += "description";
    columns += ",";
    columns += "units";
    columns += ",";
    columns += "price";
    sql += columns;
    sql += " from " + "products" + " where " + "categoryId" + " in (select " + "id" + " from " + "categories";
    if (parent != null) {
      sql += " where ";
      String values = "";
      if (parent.getId() != null) {
        values += "id" + "='" + parent.getId() + "'and ";
      }
      if (parent.getName() != null) {
        values += "name" + "='" + parent.getName() + "'and ";
      }
      sql += values.substring(0, values.length() - 4);
    }
    sql += ")";
    System.out.println(sql);
    ResultSet set = stmt.executeQuery(sql);
    Product foundProduct = new Product();
    while (set.next()) {
      foundProduct = new Product();
      foundProduct.setId(Integer.valueOf(set.getBigDecimal("id").intValue()));
      foundProduct.setProductName(set.getString("name"));
      foundProduct.setDescription(set.getString("description"));
      foundProduct.setUnits(Integer.valueOf(set.getBigDecimal("units").intValue()));
      foundProduct.setPrice(Integer.valueOf(set.getBigDecimal("price").intValue()));
      products.add(foundProduct);
    }
    return products;
  }
  public List<Discount> findChildDiscounts(Category parent) throws SQLException {
    List<Discount> discounts = new ArrayList<Discount>();
    String sql = "select ";
    String columns = "";
    columns += "id";
    columns += ",";
    columns += "subject";
    columns += ",";
    columns += "description";
    columns += ",";
    columns += "price";
    sql += columns;
    sql += " from " + "discounts" + " where " + "categoryId" + " in (select " + "id" + " from " + "categories";
    if (parent != null) {
      sql += " where ";
      String values = "";
      if (parent.getId() != null) {
        values += "id" + "='" + parent.getId() + "'and ";
      }
      if (parent.getName() != null) {
        values += "name" + "='" + parent.getName() + "'and ";
      }
      sql += values.substring(0, values.length() - 4);
    }
    sql += ")";
    System.out.println(sql);
    ResultSet set = stmt.executeQuery(sql);
    Discount foundDiscount = new Discount();
    while (set.next()) {
      foundDiscount = new Discount();
      foundDiscount.setId(Integer.valueOf(set.getBigDecimal("id").intValue()));
      foundDiscount.setSubject(set.getString("subject"));
      foundDiscount.setDescription(set.getString("description"));
      foundDiscount.setPrice(Integer.valueOf(set.getBigDecimal("price").intValue()));
      discounts.add(foundDiscount);
    }
    return discounts;
  }
  public List<Category> findChildCategorys(Category parent) throws SQLException {
    List<Category> categorys = new ArrayList<Category>();
    String sql = "select ";
    String columns = "";
    columns += "id";
    columns += ",";
    columns += "name";
    sql += columns;
    sql += " from " + "categories" + " where " + "categoryId" + " in (select " + "id" + " from " + "categories";
    if (parent != null) {
      sql += " where ";
      String values = "";
      if (parent.getId() != null) {
        values += "id" + "='" + parent.getId() + "'and ";
      }
      if (parent.getName() != null) {
        values += "name" + "='" + parent.getName() + "'and ";
      }
      sql += values.substring(0, values.length() - 4);
    }
    sql += ")";
    System.out.println(sql);
    ResultSet set = stmt.executeQuery(sql);
    Category foundCategory = new Category();
    while (set.next()) {
      foundCategory = new Category();
      foundCategory.setId(Integer.valueOf(set.getBigDecimal("id").intValue()));
      foundCategory.setName(set.getString("name"));
      categorys.add(foundCategory);
    }
    return categorys;
  }

  public Category findReferenceCategory(Category parent) throws SQLException {
    Category reference = new Category();
    String sql = "select ";
    String columns = "";
    columns += "id";
    columns += ",";
    columns += "name";
    sql += columns;
    sql += " from " + "categories" + " where " + "id" + " in (select " + "parentId" + " from " + "categories";
    if (parent != null) {
      sql += " where ";
      String values = "";
      if (parent.getId() != null) {
        values += "id" + "='" + parent.getId() + "'and ";
      }
      if (parent.getName() != null) {
        values += "name" + "='" + parent.getName() + "'and ";
      }
      sql += values.substring(0, values.length() - 4);
    }
    sql += ")";
    System.out.println(sql);
    ResultSet set = stmt.executeQuery(sql);
    while (set.next()) {
      reference.setId(Integer.valueOf(set.getBigDecimal("id").intValue()));
      reference.setName(set.getString("name"));
    }
    return reference;
  }

  public void addCategory(Category category) throws SQLException, ClassNotFoundException, CloneNotSupportedException {
    String sql = "insert into " + "categories" + "(";
    String columns = "";
    String values = "";
    // Loops through the properties and sets column names and column values 
    if (category.getId() != null) {
      columns += "id" + ",";
      values += "'" + category.getId() + "',";
    }
    if (category.getName() != null) {
      columns += "name" + ",";
      values += "'" + category.getName() + "',";
    }
    // Searches for the parent entity, such that it identifies and sets the foreign key columns 
    {
      Category parentCategory = category.getParentCategory();
      if (parentCategory != null) {
        columns += "categoryId" + ",";
        values += "'" + parentCategory.getId().toString() + "',";
      }
    }
    {
      Shop parentShop = category.getParentShop();
      if (parentShop != null) {
        columns += "categories" + ",";
      }
    }
    // Searches for the reference entities, such that it identifies and sets the foreign key columns 
    if (category.getCategory() != null) {
      Category referenceCategory = category.getCategory();
      CategoryDAO referenceCategoryDAO = new CategoryDAO(connn);
      if (referenceCategoryDAO.findCategorys(referenceCategory).size() == 0) {
        referenceCategoryDAO.addCategory(referenceCategory);
      }
      columns += "parentId" + ",";
      values += "'" + referenceCategory.getId() + "',";
    }
    sql += columns.substring(0, columns.length() - 1) + ") values (" + values.substring(0, values.length() - 1) + ")";
    System.out.println(sql);
    stmt.execute(sql);
    // Loops thhrough the children, and adds them recursively to the database 
    if (category.getProducts() != null) {
      ProductDAO childProductDAO = new ProductDAO(connn);
      for (Product childProduct : category.getProducts()) {
        List<Product> children = childProductDAO.findProducts(childProduct);
        if (children.size() == 0) {
          childProductDAO.addProduct(childProduct);
        } else {
          for (Product child : children) {
            Product copy = (Product) child.clone();
            child.setParentCategory(category);
            childProductDAO.updateProduct(copy, child);

          }
        }
      }
    }
    if (category.getDiscounts() != null) {
      DiscountDAO childDiscountDAO = new DiscountDAO(connn);
      for (Discount childDiscount : category.getDiscounts()) {
        List<Discount> children = childDiscountDAO.findDiscounts(childDiscount);
        if (children.size() == 0) {
          childDiscountDAO.addDiscount(childDiscount);
        } else {
          for (Discount child : children) {
            Discount copy = (Discount) child.clone();
            child.setParentCategory(category);
            childDiscountDAO.updateDiscount(copy, child);

          }
        }
      }
    }
    if (category.getCategorys() != null) {
      CategoryDAO childCategoryDAO = new CategoryDAO(connn);
      for (Category childCategory : category.getCategorys()) {
        List<Category> children = childCategoryDAO.findCategorys(childCategory);
        if (children.size() == 0) {
          childCategoryDAO.addCategory(childCategory);
        } else {
          for (Category child : children) {
            Category copy = (Category) child.clone();
            child.setParentCategory(category);
            childCategoryDAO.updateCategory(copy, child);

          }
        }
      }
    }
  }

  public void updateCategory(Category oldcategory, Category newcategory) throws SQLException, ClassNotFoundException, CloneNotSupportedException {
    String sql = "update " + "categories" + " set ";
    String values = "";
    if (newcategory.getId() != null) {
      values += "id" + "='" + newcategory.getId() + "',";
    }
    if (newcategory.getName() != null) {
      values += "name" + "='" + newcategory.getName() + "',";
    }
    {
      List<String> columnsList = new LinkedList<String>();
      List<String> valuesList = new LinkedList<String>();
      {
        Category parentCategory = newcategory.getParentCategory();
        if (parentCategory != null) {
          columnsList.add("categoryId");
          valuesList.add(parentCategory.getId().toString());
        }
      }
      {
        Shop parentShop = newcategory.getParentShop();
        if (parentShop != null) {
          columnsList.add("categories");
        }
      }
      for (int i = 0; i < columnsList.size(); i++) {
        values += columnsList.get(i) + "='" + valuesList.get(i) + "',";
      }
    }
    if (newcategory.getCategory() != null) {
      Category referenceCategory = newcategory.getCategory();
      CategoryDAO referenceCategoryDAO = new CategoryDAO(connn);
      if (referenceCategoryDAO.findCategorys(referenceCategory).size() == 0) {
        referenceCategoryDAO.addCategory(referenceCategory);
      }
      values += "parentId" + "=" + "'" + referenceCategory.getId() + "',";
    }
    String condition = " where ";
    if (oldcategory.getId() != null) {
      condition += "id" + "='" + oldcategory.getId() + "' and ";
    }
    if (oldcategory.getName() != null) {
      condition += "name" + "='" + oldcategory.getName() + "' and ";
    }
    sql += values.substring(0, values.length() - 1) + condition.substring(0, condition.length() - 4);
    System.out.println(sql);
    stmt.execute(sql);
    if (newcategory.getProducts() != null) {
      ProductDAO childProductDAO = new ProductDAO(connn);
      for (Product childProduct : newcategory.getProducts()) {
        List<Product> children = childProductDAO.findProducts(childProduct);
        if (children.size() == 0) {
          childProductDAO.addProduct(childProduct);
        } else {
          for (Product child : children) {
            Product copy = (Product) child.clone();
            child.setParentCategory(newcategory);
            childProductDAO.updateProduct(copy, child);

          }
        }
      }
    }
    if (newcategory.getDiscounts() != null) {
      DiscountDAO childDiscountDAO = new DiscountDAO(connn);
      for (Discount childDiscount : newcategory.getDiscounts()) {
        List<Discount> children = childDiscountDAO.findDiscounts(childDiscount);
        if (children.size() == 0) {
          childDiscountDAO.addDiscount(childDiscount);
        } else {
          for (Discount child : children) {
            Discount copy = (Discount) child.clone();
            child.setParentCategory(newcategory);
            childDiscountDAO.updateDiscount(copy, child);

          }
        }
      }
    }
    if (newcategory.getCategorys() != null) {
      CategoryDAO childCategoryDAO = new CategoryDAO(connn);
      for (Category childCategory : newcategory.getCategorys()) {
        List<Category> children = childCategoryDAO.findCategorys(childCategory);
        if (children.size() == 0) {
          childCategoryDAO.addCategory(childCategory);
        } else {
          for (Category child : children) {
            Category copy = (Category) child.clone();
            child.setParentCategory(newcategory);
            childCategoryDAO.updateCategory(copy, child);

          }
        }
      }
    }

  }

  public void deleteCategory(Category category) throws SQLException {
    String sql = "delete from " + "categories" + " where";
    String condition = " ";
    // Loops through the properties 
    if (category.getId() != null) {
      condition += "id" + "='" + category.getId() + "'";
      condition += " and ";
    }
    if (category.getName() != null) {
      condition += "name" + "='" + category.getName() + "'";
      condition += " and ";
    }
    sql += condition.substring(0, condition.length() - 5);
    System.out.println(sql);
    stmt.execute(sql);
  }

}
