package ro.barata.mps.boLanguage.sandbox;

/*Generated by MPS */

import java.sql.Connection;
import java.sql.Statement;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;
import java.sql.ResultSet;

public class PersonDAO {
  private Connection connn;
  private Statement stmt;

  public PersonDAO(Connection connection) throws SQLException, ClassNotFoundException {
    connn = connection;
    stmt = connection.createStatement();
  }

  public List<Person> getAllPersons() throws SQLException {
    List<Person> persons = new ArrayList<Person>();
    String columns = "";
    columns += "table0." + "id" + " \"parent" + "id" + "\",";
    columns += "table0." + "firstName" + " \"parent" + "firstName" + "\",";
    columns += "table0." + "lastName" + " \"parent" + "lastName" + "\",";
    String sql = " from " + "PersonTable" + " table0";
    String leftJoins = "";
    int i = 1;

    sql = "select " + columns.substring(0, columns.length() - 1) + sql + leftJoins;
    System.out.println(sql);
    ResultSet set = stmt.executeQuery(sql);
    Person foundPerson = null;
    while (set.next()) {
      foundPerson = new Person();
      foundPerson.setId(Integer.valueOf(set.getBigDecimal("parent" + "id").intValue()));
      foundPerson.setFirstName(set.getString("parent" + "firstName"));
      foundPerson.setLastName(set.getString("parent" + "lastName"));
      boolean flag = true;
      for (Person entity : persons) {
        if (entity.getId() == foundPerson.getId()) {
          flag = false;
        }
      }
      if (flag) {
        persons.add(foundPerson);
      }
    }
    return persons;
  }

  public List<Person> findPersons(Person person) throws SQLException {
    List<Person> persons = new ArrayList<Person>();
    String sql = "select ";
    String columns = "";
    columns += "id";
    columns += ",";
    columns += "firstName";
    columns += ",";
    columns += "lastName";
    String values = "";
    if (person.getId() != null) {
      values += "id" + "='" + person.getId() + "' and ";
    }
    if (person.getFirstName() != null) {
      values += "firstName" + "='" + person.getFirstName() + "' and ";
    }
    if (person.getLastName() != null) {
      values += "lastName" + "='" + person.getLastName() + "' and ";
    }
    int i = 1;
    if (values.length() > 6) {
      values = " where " + values.substring(0, values.length() - 5);
    }
    sql += columns + " from " + "PersonTable" + values;
    System.out.println("Find entities: " + sql);
    ResultSet set = stmt.executeQuery(sql);
    Person foundPerson = new Person();
    while (set.next()) {
      foundPerson = new Person();
      foundPerson.setId(Integer.valueOf(set.getBigDecimal("id").intValue()));
      foundPerson.setFirstName(set.getString("firstName"));
      foundPerson.setLastName(set.getString("lastName"));
      persons.add(foundPerson);
    }
    return persons;
  }

  public void addPerson(Person person) throws SQLException, ClassNotFoundException {
    String sql = "insert into " + "PersonTable" + "(";
    String columns = "";
    String values = "";
    if (person.getId() != null) {
      columns += "id" + ",";
      values += "'" + person.getId() + "',";
    }
    if (person.getFirstName() != null) {
      columns += "firstName" + ",";
      values += "'" + person.getFirstName() + "',";
    }
    if (person.getLastName() != null) {
      columns += "lastName" + ",";
      values += "'" + person.getLastName() + "',";
    }
    sql += columns.substring(0, columns.length() - 1) + ") values (" + values.substring(0, values.length() - 1) + ")";
    System.out.println(sql);
    stmt.execute(sql);
  }

  public void updatePerson(Person oldperson, Person newperson) throws SQLException, ClassNotFoundException {
    String sql = "update " + "PersonTable" + " set ";
    String values = "";
    if (newperson.getId() != null) {
      values += "id" + "='" + newperson.getId() + "',";
    }
    if (newperson.getFirstName() != null) {
      values += "firstName" + "='" + newperson.getFirstName() + "',";
    }
    if (newperson.getLastName() != null) {
      values += "lastName" + "='" + newperson.getLastName() + "',";
    }
    String condition = " where ";
    if (oldperson.getId() != null) {
      condition += "id" + "='" + oldperson.getId() + "' and ";
    }
    if (oldperson.getFirstName() != null) {
      condition += "firstName" + "='" + oldperson.getFirstName() + "' and ";
    }
    if (oldperson.getLastName() != null) {
      condition += "lastName" + "='" + oldperson.getLastName() + "' and ";
    }
    sql += values.substring(0, values.length() - 1) + condition.substring(0, condition.length() - 4);
    System.out.println(sql);
    stmt.execute(sql);

  }

  public void deletePerson(Person person) throws SQLException {
    String sql = "delete from " + "PersonTable" + " where";
    String condition = " ";
    if (person.getId() != null) {
      condition += "id" + "='" + person.getId() + "'";
      condition += " and ";
    }
    if (person.getFirstName() != null) {
      condition += "firstName" + "='" + person.getFirstName() + "'";
      condition += " and ";
    }
    if (person.getLastName() != null) {
      condition += "lastName" + "='" + person.getLastName() + "'";
      condition += " and ";
    }
    sql += condition.substring(0, condition.length() - 5);
    System.out.println(sql);
    stmt.execute(sql);

  }

}
