package ro.barata.mps.boLanguage.sandbox;

/*Generated by MPS */

import java.sql.Connection;
import java.sql.Statement;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;
import java.sql.ResultSet;
import java.util.LinkedList;

public class DiscountDAO {
  private Connection connn;
  private Statement stmt;

  public DiscountDAO(Connection connection) throws SQLException, ClassNotFoundException {
    connn = connection;
    stmt = connection.createStatement();
  }

  public List<Discount> getAllDiscounts() throws SQLException {
    List<Discount> discounts = new ArrayList<Discount>();
    String columns = "";
    columns += "table0." + "id" + " \"parent" + "id" + "\",";
    columns += "table0." + "subject" + " \"parent" + "subject" + "\",";
    columns += "table0." + "description" + " \"parent" + "description" + "\",";
    columns += "table0." + "price" + " \"parent" + "price" + "\",";
    String sql = " from " + "discounts" + " table0";
    String leftJoins = "";
    int i = 1;
    columns += "table" + i + "." + "id" + " \"" + "discountProducts" + "id" + "\",";
    leftJoins += " left join " + "discountProducts" + " table" + i + " on table" + i + "." + "promotionId" + "=table0." + "id" + " ";
    i++;

    sql = "select " + columns.substring(0, columns.length() - 1) + sql + leftJoins;
    System.out.println(sql);
    ResultSet set = stmt.executeQuery(sql);
    Discount foundDiscount = null;
    while (set.next()) {
      foundDiscount = new Discount();
      foundDiscount.setId(Integer.valueOf(set.getBigDecimal("parent" + "id").intValue()));
      foundDiscount.setSubject(set.getString("parent" + "subject"));
      foundDiscount.setDescription(set.getString("parent" + "description"));
      foundDiscount.setPrice(Integer.valueOf(set.getBigDecimal("parent" + "price").intValue()));
      {
        ProductReference child = new ProductReference();
        if (set.getBigDecimal("discountProducts" + "id") != null) {
          child.setId(Integer.valueOf(set.getBigDecimal("discountProducts" + "id").intValue()));
        }
        if (child.getId() != null) {
          foundDiscount.addProductReference(child);
        }
      }
      boolean flag = true;
      for (Discount entity : discounts) {
        if (entity.getId() == foundDiscount.getId()) {
          flag = false;
        }
      }
      if (flag) {
        discounts.add(foundDiscount);
      }
    }
    return discounts;
  }

  public List<Discount> findDiscounts(Discount discount) throws SQLException {
    List<Discount> discounts = new ArrayList<Discount>();
    String sql = "select ";
    String columns = "";
    columns += "id";
    columns += ",";
    columns += "subject";
    columns += ",";
    columns += "description";
    columns += ",";
    columns += "price";
    String values = "";
    if (discount.getId() != null) {
      values += "id" + "='" + discount.getId() + "' and ";
    }
    if (discount.getSubject() != null) {
      values += "subject" + "='" + discount.getSubject() + "' and ";
    }
    if (discount.getDescription() != null) {
      values += "description" + "='" + discount.getDescription() + "' and ";
    }
    if (discount.getPrice() != null) {
      values += "price" + "='" + discount.getPrice() + "' and ";
    }
    int i = 1;
    if (values.length() > 6) {
      values = " where " + values.substring(0, values.length() - 5);
    }
    sql += columns + " from " + "discounts" + values;
    System.out.println("Find entities: " + sql);
    ResultSet set = stmt.executeQuery(sql);
    Discount foundDiscount = new Discount();
    while (set.next()) {
      foundDiscount = new Discount();
      foundDiscount.setId(Integer.valueOf(set.getBigDecimal("id").intValue()));
      foundDiscount.setSubject(set.getString("subject"));
      foundDiscount.setDescription(set.getString("description"));
      foundDiscount.setPrice(Integer.valueOf(set.getBigDecimal("price").intValue()));
      discounts.add(foundDiscount);
    }
    return discounts;
  }
  public List<ProductReference> findChildProductReferences(Discount parent) throws SQLException {
    List<ProductReference> productreferences = new ArrayList<ProductReference>();
    String sql = "select ";
    String columns = "";
    columns += "id";
    sql += columns;
    sql += " from " + "discountProducts" + " where " + "promotionId" + " in (select " + "id" + " from " + "discounts";
    if (parent != null) {
      sql += " where ";
      String values = "";
      if (parent.getId() != null) {
        values += "id" + "='" + parent.getId() + "'and ";
      }
      if (parent.getSubject() != null) {
        values += "subject" + "='" + parent.getSubject() + "'and ";
      }
      if (parent.getDescription() != null) {
        values += "description" + "='" + parent.getDescription() + "'and ";
      }
      if (parent.getPrice() != null) {
        values += "price" + "='" + parent.getPrice() + "'and ";
      }
      sql += values.substring(0, values.length() - 4);
    }
    sql += ")";
    System.out.println(sql);
    ResultSet set = stmt.executeQuery(sql);
    ProductReference foundProductReference = new ProductReference();
    while (set.next()) {
      foundProductReference = new ProductReference();
      foundProductReference.setId(Integer.valueOf(set.getBigDecimal("id").intValue()));
      productreferences.add(foundProductReference);
    }
    return productreferences;
  }


  public void addDiscount(Discount discount) throws SQLException, ClassNotFoundException, CloneNotSupportedException {
    String sql = "insert into " + "discounts" + "(";
    String columns = "";
    String values = "";
    // Loops through the properties and sets column names and column values 
    if (discount.getId() != null) {
      columns += "id" + ",";
      values += "'" + discount.getId() + "',";
    }
    if (discount.getSubject() != null) {
      columns += "subject" + ",";
      values += "'" + discount.getSubject() + "',";
    }
    if (discount.getDescription() != null) {
      columns += "description" + ",";
      values += "'" + discount.getDescription() + "',";
    }
    if (discount.getPrice() != null) {
      columns += "price" + ",";
      values += "'" + discount.getPrice() + "',";
    }
    // Searches for the parent entity, such that it identifies and sets the foreign key columns 
    {
      Category parentCategory = discount.getParentCategory();
      if (parentCategory != null) {
        columns += "categoryId" + ",";
        values += "'" + parentCategory.getId().toString() + "',";
      }
    }
    {
      Cart parentCart = discount.getParentCart();
      if (parentCart != null) {
        columns += "discounts" + ",";
      }
    }
    // Searches for the reference entities, such that it identifies and sets the foreign key columns 
    sql += columns.substring(0, columns.length() - 1) + ") values (" + values.substring(0, values.length() - 1) + ")";
    System.out.println(sql);
    stmt.execute(sql);
    // Loops thhrough the children, and adds them recursively to the database 
    if (discount.getProductReferences() != null) {
      ProductReferenceDAO childProductReferenceDAO = new ProductReferenceDAO(connn);
      for (ProductReference childProductReference : discount.getProductReferences()) {
        List<ProductReference> children = childProductReferenceDAO.findProductReferences(childProductReference);
        if (children.size() == 0) {
          childProductReferenceDAO.addProductReference(childProductReference);
        } else {
          for (ProductReference child : children) {
            ProductReference copy = (ProductReference) child.clone();
            child.setParentDiscount(discount);
            childProductReferenceDAO.updateProductReference(copy, child);

          }
        }
      }
    }
  }

  public void updateDiscount(Discount olddiscount, Discount newdiscount) throws SQLException, ClassNotFoundException, CloneNotSupportedException {
    String sql = "update " + "discounts" + " set ";
    String values = "";
    if (newdiscount.getId() != null) {
      values += "id" + "='" + newdiscount.getId() + "',";
    }
    if (newdiscount.getSubject() != null) {
      values += "subject" + "='" + newdiscount.getSubject() + "',";
    }
    if (newdiscount.getDescription() != null) {
      values += "description" + "='" + newdiscount.getDescription() + "',";
    }
    if (newdiscount.getPrice() != null) {
      values += "price" + "='" + newdiscount.getPrice() + "',";
    }
    {
      List<String> columnsList = new LinkedList<String>();
      List<String> valuesList = new LinkedList<String>();
      {
        Category parentCategory = newdiscount.getParentCategory();
        if (parentCategory != null) {
          columnsList.add("categoryId");
          valuesList.add(parentCategory.getId().toString());
        }
      }
      {
        Cart parentCart = newdiscount.getParentCart();
        if (parentCart != null) {
          columnsList.add("discounts");
        }
      }
      for (int i = 0; i < columnsList.size(); i++) {
        values += columnsList.get(i) + "='" + valuesList.get(i) + "',";
      }
    }
    String condition = " where ";
    if (olddiscount.getId() != null) {
      condition += "id" + "='" + olddiscount.getId() + "' and ";
    }
    if (olddiscount.getSubject() != null) {
      condition += "subject" + "='" + olddiscount.getSubject() + "' and ";
    }
    if (olddiscount.getDescription() != null) {
      condition += "description" + "='" + olddiscount.getDescription() + "' and ";
    }
    if (olddiscount.getPrice() != null) {
      condition += "price" + "='" + olddiscount.getPrice() + "' and ";
    }
    sql += values.substring(0, values.length() - 1) + condition.substring(0, condition.length() - 4);
    System.out.println(sql);
    stmt.execute(sql);
    if (newdiscount.getProductReferences() != null) {
      ProductReferenceDAO childProductReferenceDAO = new ProductReferenceDAO(connn);
      for (ProductReference childProductReference : newdiscount.getProductReferences()) {
        List<ProductReference> children = childProductReferenceDAO.findProductReferences(childProductReference);
        if (children.size() == 0) {
          childProductReferenceDAO.addProductReference(childProductReference);
        } else {
          for (ProductReference child : children) {
            ProductReference copy = (ProductReference) child.clone();
            child.setParentDiscount(newdiscount);
            childProductReferenceDAO.updateProductReference(copy, child);

          }
        }
      }
    }

  }

  public void deleteDiscount(Discount discount) throws SQLException {
    String sql = "delete from " + "discounts" + " where";
    String condition = " ";
    // Loops through the properties 
    if (discount.getId() != null) {
      condition += "id" + "='" + discount.getId() + "'";
      condition += " and ";
    }
    if (discount.getSubject() != null) {
      condition += "subject" + "='" + discount.getSubject() + "'";
      condition += " and ";
    }
    if (discount.getDescription() != null) {
      condition += "description" + "='" + discount.getDescription() + "'";
      condition += " and ";
    }
    if (discount.getPrice() != null) {
      condition += "price" + "='" + discount.getPrice() + "'";
      condition += " and ";
    }
    sql += condition.substring(0, condition.length() - 5);
    System.out.println(sql);
    stmt.execute(sql);
  }

}
