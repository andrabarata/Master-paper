package ro.barata.mps.boLanguage.sandbox;

/*Generated by MPS */

import java.sql.Connection;
import java.sql.Statement;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;
import java.sql.ResultSet;

public class ShopDAO {
  private Connection connn;
  private Statement stmt;

  public ShopDAO(Connection connection) throws SQLException, ClassNotFoundException {
    connn = connection;
    stmt = connection.createStatement();
  }

  public List<Shop> getAllShops() throws SQLException {
    List<Shop> shops = new ArrayList<Shop>();
    String columns = "";
    columns += "table0." + "id" + " \"parent" + "id" + "\",";
    columns += "table0." + "name" + " \"parent" + "name" + "\",";
    String sql = " from " + "Shop" + " table0";
    String leftJoins = "";
    int i = 1;
    columns += "table" + i + "." + "id" + " \"" + "UserTable" + "id" + "\",";
    columns += "table" + i + "." + "priviledge" + " \"" + "UserTable" + "priviledge" + "\",";
    columns += "table" + i + "." + "userName" + " \"" + "UserTable" + "userName" + "\",";
    columns += "table" + i + "." + "password" + " \"" + "UserTable" + "password" + "\",";
    leftJoins += " left join " + "UserTable" + " table" + i + " on table" + i + "." + "shopId" + "=table0." + "id" + " ";
    i++;
    columns += "table" + i + "." + "id" + " \"" + "Category" + "id" + "\",";
    columns += "table" + i + "." + "name" + " \"" + "Category" + "name" + "\",";
    leftJoins += " left join " + "Category" + " table" + i + " on table" + i + "." + "shopId" + "=table0." + "id" + " ";
    i++;

    sql = "select " + columns.substring(0, columns.length() - 1) + sql + leftJoins;
    System.out.println(sql);
    ResultSet set = stmt.executeQuery(sql);
    Shop foundShop = null;
    while (set.next()) {
      foundShop = new Shop();
      foundShop.setId(Integer.valueOf(set.getBigDecimal("parent" + "id").intValue()));
      foundShop.setName(set.getString("parent" + "name"));
      {
        User child = new User();
        if (set.getBigDecimal("UserTable" + "id") != null) {
          child.setUserId(Integer.valueOf(set.getBigDecimal("UserTable" + "id").intValue()));
        }
        if (set.getString("UserTable" + "priviledge") != null) {
          child.setPriviledge(set.getString("UserTable" + "priviledge"));
        }
        if (set.getString("UserTable" + "userName") != null) {
          child.setUserName(set.getString("UserTable" + "userName"));
        }
        if (set.getString("UserTable" + "password") != null) {
          child.setPassword(set.getString("UserTable" + "password"));
        }
        if (child.getUserId() != null) {
          foundShop.addUser(child);
        }
      }
      {
        Category child = new Category();
        if (set.getBigDecimal("Category" + "id") != null) {
          child.setId(Integer.valueOf(set.getBigDecimal("Category" + "id").intValue()));
        }
        if (set.getString("Category" + "name") != null) {
          child.setName(set.getString("Category" + "name"));
        }
        if (child.getId() != null) {
          foundShop.addCategory(child);
        }
      }
      boolean flag = true;
      for (Shop entity : shops) {
        if (entity.getId() == foundShop.getId()) {
          flag = false;
        }
      }
      if (flag) {
        shops.add(foundShop);
      }
    }
    return shops;
  }

  public List<Shop> findShops(Shop shop) throws SQLException {
    List<Shop> shops = new ArrayList<Shop>();
    String sql = "select ";
    String columns = "";
    columns += "id";
    columns += ",";
    columns += "name";
    String values = "";
    if (shop.getId() != null) {
      values += "id" + "='" + shop.getId() + "' and ";
    }
    if (shop.getName() != null) {
      values += "name" + "='" + shop.getName() + "' and ";
    }
    int i = 1;
    if (values.length() > 6) {
      values = " where " + values.substring(0, values.length() - 5);
    }
    sql += columns + " from " + "Shop" + values;
    System.out.println("Find entities: " + sql);
    ResultSet set = stmt.executeQuery(sql);
    Shop foundShop = new Shop();
    while (set.next()) {
      foundShop = new Shop();
      foundShop.setId(Integer.valueOf(set.getBigDecimal("id").intValue()));
      foundShop.setName(set.getString("name"));
      shops.add(foundShop);
    }
    return shops;
  }
  public List<User> findChildUsers(Shop parent) throws SQLException {
    List<User> users = new ArrayList<User>();
    String sql = "select ";
    String columns = "";
    columns += "id";
    columns += ",";
    columns += "priviledge";
    columns += ",";
    columns += "userName";
    columns += ",";
    columns += "password";
    sql += columns;
    sql += " from " + "UserTable" + " where " + "shopId" + " in (select " + "id" + " from " + "Shop";
    if (parent != null) {
      sql += " where ";
      String values = "";
      if (parent.getId() != null) {
        values += "id" + "='" + parent.getId() + "'and ";
      }
      if (parent.getName() != null) {
        values += "name" + "='" + parent.getName() + "'and ";
      }
      sql += values.substring(0, values.length() - 4);
    }
    sql += ")";
    System.out.println(sql);
    ResultSet set = stmt.executeQuery(sql);
    User foundUser = new User();
    while (set.next()) {
      foundUser = new User();
      foundUser.setUserId(Integer.valueOf(set.getBigDecimal("id").intValue()));
      foundUser.setPriviledge(set.getString("priviledge"));
      foundUser.setUserName(set.getString("userName"));
      foundUser.setPassword(set.getString("password"));
      users.add(foundUser);
    }
    return users;
  }
  public List<Category> findChildCategorys(Shop parent) throws SQLException {
    List<Category> categorys = new ArrayList<Category>();
    String sql = "select ";
    String columns = "";
    columns += "id";
    columns += ",";
    columns += "name";
    sql += columns;
    sql += " from " + "Category" + " where " + "shopId" + " in (select " + "id" + " from " + "Shop";
    if (parent != null) {
      sql += " where ";
      String values = "";
      if (parent.getId() != null) {
        values += "id" + "='" + parent.getId() + "'and ";
      }
      if (parent.getName() != null) {
        values += "name" + "='" + parent.getName() + "'and ";
      }
      sql += values.substring(0, values.length() - 4);
    }
    sql += ")";
    System.out.println(sql);
    ResultSet set = stmt.executeQuery(sql);
    Category foundCategory = new Category();
    while (set.next()) {
      foundCategory = new Category();
      foundCategory.setId(Integer.valueOf(set.getBigDecimal("id").intValue()));
      foundCategory.setName(set.getString("name"));
      categorys.add(foundCategory);
    }
    return categorys;
  }

  public void addShop(Shop shop) throws SQLException, ClassNotFoundException {
    String sql = "insert into " + "Shop" + "(";
    String columns = "";
    String values = "";
    if (shop.getId() != null) {
      columns += "id" + ",";
      values += "'" + shop.getId() + "',";
    }
    if (shop.getName() != null) {
      columns += "name" + ",";
      values += "'" + shop.getName() + "',";
    }
    sql += columns.substring(0, columns.length() - 1) + ") values (" + values.substring(0, values.length() - 1) + ")";
    System.out.println(sql);
    stmt.execute(sql);
    if (shop.getUsers() != null) {
      UserDAO childUserDAO = new UserDAO(connn);
      for (User childUser : shop.getUsers()) {
        childUserDAO.addUser(childUser);
      }
    }
    if (shop.getCategorys() != null) {
      CategoryDAO childCategoryDAO = new CategoryDAO(connn);
      for (Category childCategory : shop.getCategorys()) {
        childCategoryDAO.addCategory(childCategory);
      }
    }
  }

  public void updateShop(Shop oldshop, Shop newshop) throws SQLException, ClassNotFoundException {
    String sql = "update " + "Shop" + " set ";
    String values = "";
    if (newshop.getId() != null) {
      values += "id" + "='" + newshop.getId() + "',";
    }
    if (newshop.getName() != null) {
      values += "name" + "='" + newshop.getName() + "',";
    }
    String condition = " where ";
    if (oldshop.getId() != null) {
      condition += "id" + "='" + oldshop.getId() + "' and ";
    }
    if (oldshop.getName() != null) {
      condition += "name" + "='" + oldshop.getName() + "' and ";
    }
    sql += values.substring(0, values.length() - 1) + condition.substring(0, condition.length() - 4);
    System.out.println(sql);
    stmt.execute(sql);
    if (newshop.getUsers() != null) {
      UserDAO childUserDAO = new UserDAO(connn);
      for (User childUser : newshop.getUsers()) {
        childUserDAO.addUser(childUser);
      }
    }
    if (newshop.getCategorys() != null) {
      CategoryDAO childCategoryDAO = new CategoryDAO(connn);
      for (Category childCategory : newshop.getCategorys()) {
        childCategoryDAO.addCategory(childCategory);
      }
    }

  }

  public void deleteShop(Shop shop) throws SQLException {
    String sql = "delete from " + "Shop" + " where";
    String condition = " ";
    if (shop.getId() != null) {
      condition += "id" + "='" + shop.getId() + "'";
      condition += " and ";
    }
    if (shop.getName() != null) {
      condition += "name" + "='" + shop.getName() + "'";
      condition += " and ";
    }
    sql += condition.substring(0, condition.length() - 5);
    System.out.println(sql);
    stmt.execute(sql);

  }

}
