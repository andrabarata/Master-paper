package ro.barata.mps.boLanguage.sandbox;

/*Generated by MPS */

import java.sql.Connection;
import java.sql.Statement;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;
import java.sql.ResultSet;
import java.util.LinkedList;

public class UserDAO {
  private Connection connn;
  private Statement stmt;

  public UserDAO(Connection connection) throws SQLException, ClassNotFoundException {
    connn = connection;
    stmt = connection.createStatement();
  }

  public List<User> getAllUsers() throws SQLException {
    List<User> users = new ArrayList<User>();
    String columns = "";
    columns += "table0." + "id" + " \"parent" + "id" + "\",";
    columns += "table0." + "name" + " \"parent" + "name" + "\",";
    columns += "table0." + "password" + " \"parent" + "password" + "\",";
    columns += "table0." + "priviledge" + " \"parent" + "priviledge" + "\",";
    String sql = " from " + "users" + " table0";
    String leftJoins = "";
    int i = 1;
    columns += "table" + i + "." + "id" + " \"" + "persons" + "id" + "\",";
    columns += "table" + i + "." + "firstName" + " \"" + "persons" + "firstName" + "\",";
    columns += "table" + i + "." + "lastName" + " \"" + "persons" + "lastName" + "\",";
    leftJoins += " left join " + "persons" + " table" + i + " on table" + i + "." + "userId" + "=table0." + "id" + " ";
    i++;

    sql = "select " + columns.substring(0, columns.length() - 1) + sql + leftJoins;
    System.out.println(sql);
    ResultSet set = stmt.executeQuery(sql);
    User foundUser = null;
    while (set.next()) {
      foundUser = new User();
      foundUser.setUserId(Integer.valueOf(set.getBigDecimal("parent" + "id").intValue()));
      foundUser.setUserName(set.getString("parent" + "name"));
      foundUser.setPassword(set.getString("parent" + "password"));
      foundUser.setPriviledge(set.getString("parent" + "priviledge"));
      {
        Person reference = new Person();
        if (set.getBigDecimal("persons" + "id") != null) {
          reference.setId(Integer.valueOf(set.getBigDecimal("persons" + "id").intValue()));
        }
        if (set.getString("persons" + "firstName") != null) {
          reference.setFirstName(set.getString("persons" + "firstName"));
        }
        if (set.getString("persons" + "lastName") != null) {
          reference.setLastName(set.getString("persons" + "lastName"));
        }

        if (reference.getId() != null) {
          foundUser.setPerson(reference);
        }
      }
      boolean flag = true;
      for (User entity : users) {
        if (entity.getUserId() == foundUser.getUserId()) {
          flag = false;
        }
      }
      if (flag) {
        users.add(foundUser);
      }
    }
    return users;
  }

  public List<User> findUsers(User user) throws SQLException {
    List<User> users = new ArrayList<User>();
    String sql = "select ";
    String columns = "";
    columns += "id";
    columns += ",";
    columns += "name";
    columns += ",";
    columns += "password";
    columns += ",";
    columns += "priviledge";
    String values = "";
    if (user.getUserId() != null) {
      values += "id" + "='" + user.getUserId() + "' and ";
    }
    if (user.getUserName() != null) {
      values += "name" + "='" + user.getUserName() + "' and ";
    }
    if (user.getPassword() != null) {
      values += "password" + "='" + user.getPassword() + "' and ";
    }
    if (user.getPriviledge() != null) {
      values += "priviledge" + "='" + user.getPriviledge() + "' and ";
    }
    int i = 1;
    if (values.length() > 6) {
      values = " where " + values.substring(0, values.length() - 5);
    }
    sql += columns + " from " + "users" + values;
    System.out.println("Find entities: " + sql);
    ResultSet set = stmt.executeQuery(sql);
    User foundUser = new User();
    while (set.next()) {
      foundUser = new User();
      foundUser.setUserId(Integer.valueOf(set.getBigDecimal("id").intValue()));
      foundUser.setUserName(set.getString("name"));
      foundUser.setPassword(set.getString("password"));
      foundUser.setPriviledge(set.getString("priviledge"));
      users.add(foundUser);
    }
    return users;
  }

  public Person findReferencePerson(User parent) throws SQLException {
    Person reference = new Person();
    String sql = "select ";
    String columns = "";
    columns += "id";
    columns += ",";
    columns += "firstName";
    columns += ",";
    columns += "lastName";
    sql += columns;
    sql += " from " + "persons" + " where " + "id" + " in (select " + "userId" + " from " + "users";
    if (parent != null) {
      sql += " where ";
      String values = "";
      if (parent.getUserId() != null) {
        values += "id" + "='" + parent.getUserId() + "'and ";
      }
      if (parent.getUserName() != null) {
        values += "name" + "='" + parent.getUserName() + "'and ";
      }
      if (parent.getPassword() != null) {
        values += "password" + "='" + parent.getPassword() + "'and ";
      }
      if (parent.getPriviledge() != null) {
        values += "priviledge" + "='" + parent.getPriviledge() + "'and ";
      }
      sql += values.substring(0, values.length() - 4);
    }
    sql += ")";
    System.out.println(sql);
    ResultSet set = stmt.executeQuery(sql);
    while (set.next()) {
      reference.setId(Integer.valueOf(set.getBigDecimal("id").intValue()));
      reference.setFirstName(set.getString("firstName"));
      reference.setLastName(set.getString("lastName"));
    }
    return reference;
  }

  public void addUser(User user) throws SQLException, ClassNotFoundException, CloneNotSupportedException {
    String sql = "insert into " + "users" + "(";
    String columns = "";
    String values = "";
    // Loops through the properties and sets column names and column values 
    if (user.getUserId() != null) {
      columns += "id" + ",";
      values += "'" + user.getUserId() + "',";
    }
    if (user.getUserName() != null) {
      columns += "name" + ",";
      values += "'" + user.getUserName() + "',";
    }
    if (user.getPassword() != null) {
      columns += "password" + ",";
      values += "'" + user.getPassword() + "',";
    }
    if (user.getPriviledge() != null) {
      columns += "priviledge" + ",";
      values += "'" + user.getPriviledge() + "',";
    }
    // Searches for the parent entity, such that it identifies and sets the foreign key columns 
    {
      Shop parentShop = user.getParentShop();
      if (parentShop != null) {
        columns += "users" + ",";
      }
    }
    // Searches for the reference entities, such that it identifies and sets the foreign key columns 
    if (user.getPerson() != null) {
      Person referencePerson = user.getPerson();
      PersonDAO referencePersonDAO = new PersonDAO(connn);
      if (referencePersonDAO.findPersons(referencePerson).size() == 0) {
        referencePersonDAO.addPerson(referencePerson);
      }
      columns += "userId" + ",";
      values += "'" + referencePerson.getId() + "',";
    }
    sql += columns.substring(0, columns.length() - 1) + ") values (" + values.substring(0, values.length() - 1) + ")";
    System.out.println(sql);
    stmt.execute(sql);
    // Loops thhrough the children, and adds them recursively to the database 
  }

  public void updateUser(User olduser, User newuser) throws SQLException, ClassNotFoundException, CloneNotSupportedException {
    String sql = "update " + "users" + " set ";
    String values = "";
    if (newuser.getUserId() != null) {
      values += "id" + "='" + newuser.getUserId() + "',";
    }
    if (newuser.getUserName() != null) {
      values += "name" + "='" + newuser.getUserName() + "',";
    }
    if (newuser.getPassword() != null) {
      values += "password" + "='" + newuser.getPassword() + "',";
    }
    if (newuser.getPriviledge() != null) {
      values += "priviledge" + "='" + newuser.getPriviledge() + "',";
    }
    {
      List<String> columnsList = new LinkedList<String>();
      List<String> valuesList = new LinkedList<String>();
      {
        Shop parentShop = newuser.getParentShop();
        if (parentShop != null) {
          columnsList.add("users");
        }
      }
      for (int i = 0; i < columnsList.size(); i++) {
        values += columnsList.get(i) + "='" + valuesList.get(i) + "',";
      }
    }
    if (newuser.getPerson() != null) {
      Person referencePerson = newuser.getPerson();
      PersonDAO referencePersonDAO = new PersonDAO(connn);
      if (referencePersonDAO.findPersons(referencePerson).size() == 0) {
        referencePersonDAO.addPerson(referencePerson);
      }
      values += "userId" + "=" + "'" + referencePerson.getId() + "'";
    }
    String condition = " where ";
    if (olduser.getUserId() != null) {
      condition += "id" + "='" + olduser.getUserId() + "' and ";
    }
    if (olduser.getUserName() != null) {
      condition += "name" + "='" + olduser.getUserName() + "' and ";
    }
    if (olduser.getPassword() != null) {
      condition += "password" + "='" + olduser.getPassword() + "' and ";
    }
    if (olduser.getPriviledge() != null) {
      condition += "priviledge" + "='" + olduser.getPriviledge() + "' and ";
    }
    sql += values.substring(0, values.length() - 1) + condition.substring(0, condition.length() - 4);
    System.out.println(sql);
    stmt.execute(sql);

  }

  public void deleteUser(User user) throws SQLException {
    String sql = "delete from " + "users" + " where";
    String condition = " ";
    // Loops through the properties 
    if (user.getUserId() != null) {
      condition += "id" + "='" + user.getUserId() + "'";
      condition += " and ";
    }
    if (user.getUserName() != null) {
      condition += "name" + "='" + user.getUserName() + "'";
      condition += " and ";
    }
    if (user.getPassword() != null) {
      condition += "password" + "='" + user.getPassword() + "'";
      condition += " and ";
    }
    if (user.getPriviledge() != null) {
      condition += "priviledge" + "='" + user.getPriviledge() + "'";
      condition += " and ";
    }
    sql += condition.substring(0, condition.length() - 5);
    System.out.println(sql);
    stmt.execute(sql);
  }

}
